/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
}

group   accord_group
version accord_version

repositories {
    mavenCentral()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8

    dependsOn(':rat')
}

checkstyle {
  showViolations = true
  configDirectory = file("${rootProject.projectDir}/.build/checkstyle")
}

test {
    useJUnitPlatform()
    // Use max(cpu/2, 1) workers to run tests
    // see https://docs.gradle.org/current/userguide/performance.html
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    minHeapSize = "1g"
    maxHeapSize = "1g"
    jvmArgs += ['-XX:+HeapDumpOnOutOfMemoryError', "-XX:HeapDumpPath=${buildDir}"]
}

tasks.withType(Test) {
  jvmArgs '-XX:+HeapDumpOnOutOfMemoryError'
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.7.0'
}

task copyMainDependencies(type: Copy) {
    from configurations.compileClasspath
    into "${buildDir}/dependencies/main/libs"
}
task copyTestDependencies(type: Copy) {
    from configurations.testCompileClasspath - configurations.compileClasspath
    into "${buildDir}/dependencies/test/libs"
}

task copyDependencies {
  dependsOn(copyMainDependencies)
  dependsOn(copyTestDependencies)
}
